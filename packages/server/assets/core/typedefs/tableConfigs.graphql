scalar JSON
scalar JSONObject

"""
Column configuration for tables
Stores complete parameter data along with display properties
"""
type TableColumn {
  # Display properties
  id: ID!
  field: String!
  header: String!
  width: Int
  visible: Boolean!
  removable: Boolean!
  order: Int!
  sortable: Boolean!
  filterable: Boolean!

  # Complete parameter data embedded in column
  parameter: Parameter! # Full parameter data from parameters.graphql
}

"""
Sort configuration for tables
"""
type TableSort {
  field: String
  order: SortOrder
}

"""
Sort input for tables
Must be separate from TableSort since inputs can't use output types
"""
input TableSortInput {
  field: String
  order: SortOrder
}

"""
Filter configuration for table columns
"""
type TableFilter {
  columnId: String!
  value: String! # String representation of value, matching parameter value format
  operator: String!
}

"""
Table settings stored in PostgreSQL
Stored in user.tables column with complete parameter data
"""
type TableSettings {
  id: ID!
  name: String!
  displayName: String!
  parentColumns: [TableColumn!]!
  childColumns: [TableColumn!]!
  categoryFilters: CategoryFilters!
  filters: [TableFilter!]!
  sort: TableSort
  lastUpdateTimestamp: Float!
  metadata: JSONObject
}

"""
Sort order enum
"""
enum SortOrder {
  ASC
  DESC
}

"""
Category filters for the table
"""
type CategoryFilters {
  selectedParentCategories: [String!]!
  selectedChildCategories: [String!]!
}

# Input Types

"""
Input for table column
When adding a parameter to a table, its full data is copied into the column
"""
input TableColumnInput {
  # Display properties
  id: ID!
  field: String!
  header: String!
  width: Int
  visible: Boolean!
  removable: Boolean!
  order: Int!
  sortable: Boolean!
  filterable: Boolean!

  # Base parameter data
  parameterId: ID!
  parameterName: String!
  parameterKind: String! # 'bim' or 'user'
  parameterType: String! # BimValueType or UserValueType
  parameterValue: String! # String representation of value
  parameterGroup: String!
  parameterMetadata: JSONObject
  parameterCategory: String
  parameterDescription: String

  # BIM-specific fields
  parameterCurrentGroup: String # Required if kind is 'bim'
  parameterFetchedGroup: String # Required if kind is 'bim'
  # User-specific fields
  parameterEquation: String # Optional, only if kind is 'user'
}

"""
Input for category filters
"""
input CategoryFiltersInput {
  selectedParentCategories: [String!]!
  selectedChildCategories: [String!]!
}

"""
Input for table filter
"""
input TableFilterInput {
  columnId: String!
  value: String! # String representation of value, matching parameter value format
  operator: String!
}

"""
Input for table settings map
"""
input TableSettingsMapInput {
  tables: [TableSettingsEntryInput!]!
}

"""
Input for table settings entry
"""
input TableSettingsEntryInput {
  id: ID!
  settings: TableSettingsInput!
}

"""
Input for table settings
"""
input TableSettingsInput {
  id: ID!
  name: String!
  displayName: String!
  parentColumns: [TableColumnInput!]!
  childColumns: [TableColumnInput!]!
  categoryFilters: CategoryFiltersInput!
  filters: [TableFilterInput!]!
  sort: TableSortInput
  metadata: JSONObject
  lastUpdateTimestamp: Float!
}

extend type Query {
  """
  Get table settings for current user
  Returns complete settings including parameter data from user.tables
  """
  userTables: JSONObject!
}

extend type Mutation {
  """
  Update table settings for current user
  Stores complete settings including parameter data in user.tables
  """
  userTablesUpdate(input: TableSettingsMapInput!): Boolean!
}
